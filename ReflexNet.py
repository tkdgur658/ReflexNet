import torch
import torch.nn as nn
import torch.nn.functional as F

class ConvUNeXt_First(nn.Module):
    def __init__(self, dim):
        super().__init__()
        self.dwconv = nn.Conv2d(dim, dim, kernel_size=3, padding=1, stride=1, groups=dim, padding_mode='reflect')
        self.norm1 = nn.BatchNorm2d(dim)
        self.pwconv1 = nn.Linear(dim, 4 * dim) 
        self.act1 = nn.GELU()
        self.pwconv2 = nn.Linear(4 * dim, dim)
        self.norm2 = nn.BatchNorm2d(dim)
        self.act2 = nn.GELU()
    def forward(self, x):
        residual = x
        x = self.dwconv(x)
        x = self.norm1(x)
        x = x.permute(0, 2, 3, 1)
        x = self.pwconv1(x)
        x = self.act1(x)
        x = self.pwconv2(x)
        x = x.permute(0, 3, 1, 2)
        x = self.norm2(x)
        x = self.act2(residual + x)
        return x
        
class Point_wise_enhanced_Initial_Encoding_Block(nn.Module):
    def __init__(self, in_channels=3, base_c=64):
        super().__init__()
        self.first = nn.Sequential(
            nn.Conv2d(in_channels, base_c, kernel_size=3, padding=1),
            nn.BatchNorm2d(base_c),
            nn.GELU(),
            nn.Conv2d(base_c, base_c, kernel_size=1),
            nn.BatchNorm2d(base_c),
            nn.GELU()
        )
        self.block_1 = ConvUNeXt_First(base_c)
        self.block_2 = ConvUNeXt_First(base_c)
        self.block_3 = ConvUNeXt_First(base_c)
    def forward(self, x):
        x_0 = self.first(x)
        x_1 = self.block_1(x_0)
        x_2 = self.block_2(x_1)
        x_3 = self.block_3(x_2)
        return x_0, x_1, x_2, x_3
        
class ReflexNet(nn.Module):
    def __init__(self,in_channels=1,num_classes=1, init_features=64):
        super().__init__()
        num_features = init_features      
        self.conv11 = Point_wise_enhanced_Initial_Encoding_Block(in_channels, num_features)
        self.conv21 = nn.Conv2d(num_features, num_features*2, kernel_size=3, padding=1)
        self.bn21 = nn.BatchNorm2d(num_features*2)
        self.conv22 = nn.Conv2d(num_features*2, num_features*2, kernel_size=3, padding=1)
        self.bn22 = nn.BatchNorm2d(num_features*2)
        self.conv31 = nn.Conv2d(num_features*2, num_features*4, kernel_size=3, padding=1)
        self.bn31 = nn.BatchNorm2d(num_features*4)
        self.conv32 = nn.Conv2d(num_features*4, num_features*4, kernel_size=3, padding=1)
        self.bn32 = nn.BatchNorm2d(num_features*4)
        self.conv33 = nn.Conv2d(num_features*4, num_features*4, kernel_size=3, padding=1)
        self.bn33 = nn.BatchNorm2d(num_features*4)
        self.conv41 = nn.Conv2d(num_features*4, num_features*8, kernel_size=3, padding=1)
        self.bn41 = nn.BatchNorm2d(num_features*8)
        self.conv42 = nn.Conv2d(num_features*8, num_features*8, kernel_size=3, padding=1)
        self.bn42 = nn.BatchNorm2d(num_features*8)
        self.conv43 = nn.Conv2d(num_features*8, num_features*8, kernel_size=3, padding=1)
        self.bn43 = nn.BatchNorm2d(num_features*8)
        self.conv51 = nn.Conv2d(num_features*8, num_features*8, kernel_size=3, padding=1)
        self.bn51 = nn.BatchNorm2d(num_features*8)
        self.conv52 = nn.Conv2d(num_features*8, num_features*8, kernel_size=3, padding=1)
        self.bn52 = nn.BatchNorm2d(num_features*8)
        self.conv53 = nn.Conv2d(num_features*8, num_features*8, kernel_size=3, padding=1)
        self.bn53 = nn.BatchNorm2d(num_features*8)
        self.conv53d = nn.Conv2d(num_features*8*2, num_features*8, kernel_size=3, padding=1)
        self.bn53d = nn.BatchNorm2d(num_features*8)
        self.conv52d = nn.Conv2d(num_features*8, num_features*8, kernel_size=3, padding=1)
        self.bn52d = nn.BatchNorm2d(num_features*8)
        self.conv51d = nn.Conv2d(num_features*8, num_features*8, kernel_size=3, padding=1)
        self.bn51d = nn.BatchNorm2d(num_features*8)
        self.conv43d = nn.Conv2d(num_features*8*2, num_features*8, kernel_size=3, padding=1)
        self.bn43d = nn.BatchNorm2d(num_features*8)
        self.conv42d = nn.Conv2d(num_features*8, num_features*8, kernel_size=3, padding=1)
        self.bn42d = nn.BatchNorm2d(num_features*8)
        self.conv41d = nn.Conv2d(num_features*8, num_features*4, kernel_size=3, padding=1)
        self.bn41d = nn.BatchNorm2d(num_features*4)
        self.conv33d = nn.Conv2d(num_features*4*2, num_features*4, kernel_size=3, padding=1)
        self.bn33d = nn.BatchNorm2d(num_features*4)
        self.conv32d = nn.Conv2d(num_features*4, num_features*4, kernel_size=3, padding=1)
        self.bn32d = nn.BatchNorm2d(num_features*4)
        self.conv31d = nn.Conv2d(num_features*4,  num_features*2, kernel_size=3, padding=1)
        self.bn31d = nn.BatchNorm2d(num_features*2)
        self.conv22d = nn.Conv2d(num_features*2*2, num_features*2, kernel_size=3, padding=1)
        self.bn22d = nn.BatchNorm2d(num_features*2)
        self.conv21d = nn.Conv2d(num_features*2, num_features, kernel_size=3, padding=1)
        self.bn21d = nn.BatchNorm2d(num_features)
        self.conv12d = nn.Conv2d(num_features*5, num_features*2, kernel_size=3, padding=1)
        self.bn12d = nn.BatchNorm2d(num_features*2)
        self.conv11d = nn.Conv2d(num_features*2, num_classes, kernel_size=3, padding=1)
    def forward(self, x):
        x1_0, x1_1, x1_2, x1_3, = self.conv11(x)
        x1p, id1 = F.max_pool2d(x1_3, kernel_size=2, stride=2,return_indices=True)
        x21 = F.relu(self.bn21(self.conv21(x1p)))
        x22 = F.relu(self.bn22(self.conv22(x21)))
        x2p, id2 = F.max_pool2d(x22,kernel_size=2, stride=2,return_indices=True)
        x31 = F.relu(self.bn31(self.conv31(x2p)))
        x32 = F.relu(self.bn32(self.conv32(x31)))
        x33 = F.relu(self.bn33(self.conv33(x32)))
        x3p, id3 = F.max_pool2d(x33,kernel_size=2, stride=2,return_indices=True)
        x41 = F.relu(self.bn41(self.conv41(x3p)))
        x42 = F.relu(self.bn42(self.conv42(x41)))
        x43 = F.relu(self.bn43(self.conv43(x42)))
        x4p, id4 = F.max_pool2d(x43,kernel_size=2, stride=2,return_indices=True)
        x51 = F.relu(self.bn51(self.conv51(x4p)))
        x52 = F.relu(self.bn52(self.conv52(x51)))
        x53 = F.relu(self.bn53(self.conv53(x52)))
        x5p, id5 = F.max_pool2d(x53,kernel_size=2, stride=2,return_indices=True)
        x5d = F.max_unpool2d(x5p, id5, kernel_size=2, stride=2)
        x5d = torch.cat((x5d, x53), dim=1)
        x53d = F.relu(self.bn53d(self.conv53d(x5d)))
        x52d = F.relu(self.bn52d(self.conv52d(x53d)))
        x51d = F.relu(self.bn51d(self.conv51d(x52d)))
        x4d = F.max_unpool2d(x51d, id4, kernel_size=2, stride=2)
        x4d = torch.cat((x4d, x43), dim=1)
        x43d = F.relu(self.bn43d(self.conv43d(x4d)))
        x42d = F.relu(self.bn42d(self.conv42d(x43d)))
        x41d = F.relu(self.bn41d(self.conv41d(x42d)))
        x3d = F.max_unpool2d(x41d, id3, kernel_size=2, stride=2)
        x3d = torch.cat((x3d, x33), dim=1)
        x33d = F.relu(self.bn33d(self.conv33d(x3d)))
        x32d = F.relu(self.bn32d(self.conv32d(x33d)))
        x31d = F.relu(self.bn31d(self.conv31d(x32d)))
        x2d = F.max_unpool2d(x31d, id2, kernel_size=2, stride=2)
        x2d = torch.cat((x2d, x22), dim=1)
        x22d = F.relu(self.bn22d(self.conv22d(x2d)))
        x21d = F.relu(self.bn21d(self.conv21d(x22d)))
        x1d = F.max_unpool2d(x21d, id1, kernel_size=2, stride=2)
        x1d = torch.cat((x1d, x1_0, x1_1, x1_2, x1_3), dim=1)
        x1d = F.relu(self.bn12d(self.conv12d(x1d)))     
        x11d = self.conv11d(x1d)
        return x11d
# import pytorch_model_summary
# print(pytorch_model_summary.summary(ReflexNet(3),torch.rand((1, 3, 512, 512))))